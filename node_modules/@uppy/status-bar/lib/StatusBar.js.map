{"version":3,"names":["UIPlugin","emaFilter","getTextDirection","statusBarStates","StatusBarUI","packageJson","locale","speedFilterHalfLife","ETAFilterHalfLife","getUploadingState","error","isAllComplete","recoveredState","files","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","progress","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","_lastUpdateTime","_classPrivateFieldLooseKey","_previousUploadedBytes","_previousSpeed","_previousETA","_computeSmoothETA","StatusBar","constructor","uppy","opts","defineProperty","value","_computeSmoothETA2","writable","startUpload","getState","_classPrivateFieldLooseBase","values","reduce","pv","_ref","bytesUploaded","emit","undefined","performance","now","upload","catch","id","title","type","defaultLocale","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","capabilities","allowNewUpload","totalProgress","newFiles","startedFiles","completeFiles","isUploadStarted","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","bytesTotal","totalETA","uploaded","total","remaining","uploadState","complete","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","totalBytes","_classPrivateFieldLoo","_classPrivateFieldLoo2","dt","_classPrivateFieldLoo3","Math","round","uploadedBytesSinceLastTick","_classPrivateFieldLoo4","currentSpeed","filteredSpeed","instantETA","updatedPreviousETA","max","filteredETA","VERSION","version"],"sources":["StatusBar.jsx"],"sourcesContent":["import { UIPlugin } from '@uppy/core'\nimport emaFilter from '@uppy/utils/lib/emaFilter'\nimport getTextDirection from '@uppy/utils/lib/getTextDirection'\nimport statusBarStates from './StatusBarStates.js'\nimport StatusBarUI from './StatusBarUI.jsx'\n\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\nconst speedFilterHalfLife = 2000\nconst ETAFilterHalfLife = 2000\n\nfunction getUploadingState (error, isAllComplete, recoveredState, files) {\n  if (error) {\n    return statusBarStates.STATE_ERROR\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING\n  }\n\n  let state = statusBarStates.STATE_WAITING\n  const fileIDs = Object.keys(files)\n  for (let i = 0; i < fileIDs.length; i++) {\n    const { progress } = files[fileIDs[i]]\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (\n      progress.postprocess\n      && state !== statusBarStates.STATE_UPLOADING\n      && state !== statusBarStates.STATE_PREPROCESSING\n    ) {\n      state = statusBarStates.STATE_POSTPROCESSING\n    }\n  }\n  return state\n}\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nexport default class StatusBar extends UIPlugin {\n  static VERSION = packageJson.version\n\n  #lastUpdateTime\n\n  #previousUploadedBytes\n\n  #previousSpeed\n\n  #previousETA\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = locale\n\n    // set default options, must be kept in sync with @uppy/react/src/StatusBar.js\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  #computeSmoothETA (totalBytes) {\n    if (totalBytes.total === 0 || totalBytes.remaining === 0) {\n      return 0\n    }\n\n    // When state is restored, lastUpdateTime is still nullish at this point.\n    this.#lastUpdateTime ??= performance.now()\n    const dt = performance.now() - this.#lastUpdateTime\n    if (dt === 0) {\n      return Math.round((this.#previousETA ?? 0) / 100) / 10\n    }\n\n    const uploadedBytesSinceLastTick = totalBytes.uploaded - this.#previousUploadedBytes\n    this.#previousUploadedBytes = totalBytes.uploaded\n\n    // uploadedBytesSinceLastTick can be negative in some cases (packet loss?)\n    // in which case, we wait for next tick to update ETA.\n    if (uploadedBytesSinceLastTick <= 0) {\n      return Math.round((this.#previousETA ?? 0) / 100) / 10\n    }\n    const currentSpeed = uploadedBytesSinceLastTick / dt\n    const filteredSpeed = this.#previousSpeed == null\n      ? currentSpeed\n      : emaFilter(currentSpeed, this.#previousSpeed, speedFilterHalfLife, dt)\n    this.#previousSpeed = filteredSpeed\n    const instantETA = totalBytes.remaining / filteredSpeed\n\n    const updatedPreviousETA = Math.max(this.#previousETA - dt, 0)\n    const filteredETA = this.#previousETA == null\n      ? instantETA\n      : emaFilter(instantETA, updatedPreviousETA, ETAFilterHalfLife, dt)\n    this.#previousETA = filteredETA\n    this.#lastUpdateTime = performance.now()\n\n    return Math.round(filteredETA / 100) / 10\n  }\n\n  startUpload = () => {\n    const { recoveredState } = this.uppy.getState()\n\n    this.#previousSpeed = null\n    this.#previousETA = null\n    if (recoveredState) {\n      this.#previousUploadedBytes = Object.values(recoveredState.files)\n        .reduce((pv, { progress }) => pv + progress.bytesUploaded, 0)\n\n      // We don't set `#lastUpdateTime` at this point because the upload won't\n      // actually resume until the user asks for it.\n\n      this.uppy.emit('restore-confirmed')\n      return undefined\n    }\n    this.#lastUpdateTime = performance.now()\n    this.#previousUploadedBytes = 0\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  }\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost,\n    } = this.uppy.getObjectOfFilesPerState()\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState\n      ? Object.values(files)\n      : newFiles\n    const resumableUploads = !!capabilities.resumableUploads\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n\n    startedFiles.forEach((file) => {\n      totalSize += file.progress.bytesTotal || 0\n      totalUploadedSize += file.progress.bytesUploaded || 0\n    })\n    const totalETA = this.#computeSmoothETA({\n      uploaded: totalUploadedSize,\n      total: totalSize,\n      remaining: totalSize - totalUploadedSize,\n    })\n\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(\n        error,\n        isAllComplete,\n        recoveredState,\n        state.files || {},\n      ),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl,\n    })\n  }\n\n  onMount () {\n    // Set the text direction if the page has not defined one.\n    const element = this.el\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  install () {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,WAAW,MAAM,kBAAmB;AAAA,MAEpCC,WAAW;EAAA;AAAA;AAClB,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,mBAAmB,GAAG,IAAI;AAChC,MAAMC,iBAAiB,GAAG,IAAI;AAE9B,SAASC,iBAAiBA,CAAEC,KAAK,EAAEC,aAAa,EAAEC,cAAc,EAAEC,KAAK,EAAE;EACvE,IAAIH,KAAK,EAAE;IACT,OAAOP,eAAe,CAACW,WAAW;EACpC;EAEA,IAAIH,aAAa,EAAE;IACjB,OAAOR,eAAe,CAACY,cAAc;EACvC;EAEA,IAAIH,cAAc,EAAE;IAClB,OAAOT,eAAe,CAACa,aAAa;EACtC;EAEA,IAAIC,KAAK,GAAGd,eAAe,CAACa,aAAa;EACzC,MAAME,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACP,KAAK,CAAC;EAClC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,MAAM;MAAEE;IAAS,CAAC,GAAGV,KAAK,CAACK,OAAO,CAACG,CAAC,CAAC,CAAC;IACtC;IACA,IAAIE,QAAQ,CAACC,aAAa,IAAI,CAACD,QAAQ,CAACE,cAAc,EAAE;MACtD,OAAOtB,eAAe,CAACuB,eAAe;IACxC;IACA;IACA;IACA,IAAIH,QAAQ,CAACI,UAAU,IAAIV,KAAK,KAAKd,eAAe,CAACuB,eAAe,EAAE;MACpET,KAAK,GAAGd,eAAe,CAACyB,mBAAmB;IAC7C;IACA;IACA;IACA,IACEL,QAAQ,CAACM,WAAW,IACjBZ,KAAK,KAAKd,eAAe,CAACuB,eAAe,IACzCT,KAAK,KAAKd,eAAe,CAACyB,mBAAmB,EAChD;MACAX,KAAK,GAAGd,eAAe,CAAC2B,oBAAoB;IAC9C;EACF;EACA,OAAOb,KAAK;AACd;;AAEA;AACA;AACA;AACA;AAHA,IAAAc,eAAA,gBAAAC,0BAAA;AAAA,IAAAC,sBAAA,gBAAAD,0BAAA;AAAA,IAAAE,cAAA,gBAAAF,0BAAA;AAAA,IAAAG,YAAA,gBAAAH,0BAAA;AAAA,IAAAI,iBAAA,gBAAAJ,0BAAA;AAIA,eAAe,MAAMK,SAAS,SAASrC,QAAQ,CAAC;EAW9CsC,WAAWA,CAAEC,IAAI,EAAEC,IAAI,EAAE;IACvB,KAAK,CAACD,IAAI,EAAEC,IAAI,CAAC;IAAArB,MAAA,CAAAsB,cAAA,OAAAL,iBAAA;MAAAM,KAAA,EAAAC;IAAA;IAAAxB,MAAA,CAAAsB,cAAA,OAAAV,eAAA;MAAAa,QAAA;MAAAF,KAAA;IAAA;IAAAvB,MAAA,CAAAsB,cAAA,OAAAR,sBAAA;MAAAW,QAAA;MAAAF,KAAA;IAAA;IAAAvB,MAAA,CAAAsB,cAAA,OAAAP,cAAA;MAAAU,QAAA;MAAAF,KAAA;IAAA;IAAAvB,MAAA,CAAAsB,cAAA,OAAAN,YAAA;MAAAS,QAAA;MAAAF,KAAA;IAAA;IAAA,KAgEnBG,WAAW,GAAG,MAAM;MAClB,MAAM;QAAEjC;MAAe,CAAC,GAAG,IAAI,CAAC2B,IAAI,CAACO,QAAQ,CAAC,CAAC;MAE/CC,2BAAA,KAAI,EAAAb,cAAA,EAAAA,cAAA,IAAkB,IAAI;MAC1Ba,2BAAA,KAAI,EAAAZ,YAAA,EAAAA,YAAA,IAAgB,IAAI;MACxB,IAAIvB,cAAc,EAAE;QAClBmC,2BAAA,KAAI,EAAAd,sBAAA,EAAAA,sBAAA,IAA0Bd,MAAM,CAAC6B,MAAM,CAACpC,cAAc,CAACC,KAAK,CAAC,CAC9DoC,MAAM,CAAC,CAACC,EAAE,EAAAC,IAAA;UAAA,IAAE;YAAE5B;UAAS,CAAC,GAAA4B,IAAA;UAAA,OAAKD,EAAE,GAAG3B,QAAQ,CAAC6B,aAAa;QAAA,GAAE,CAAC,CAAC;;QAE/D;QACA;;QAEA,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,mBAAmB,CAAC;QACnC,OAAOC,SAAS;MAClB;MACAP,2BAAA,KAAI,EAAAhB,eAAA,EAAAA,eAAA,IAAmBwB,WAAW,CAACC,GAAG,CAAC,CAAC;MACxCT,2BAAA,KAAI,EAAAd,sBAAA,EAAAA,sBAAA,IAA0B,CAAC;MAC/B,OAAO,IAAI,CAACM,IAAI,CAACkB,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM;QACpC;MAAA,CACD,CAAC;IACJ,CAAC;IAnFC,IAAI,CAACC,EAAE,GAAG,IAAI,CAACnB,IAAI,CAACmB,EAAE,IAAI,WAAW;IACrC,IAAI,CAACC,KAAK,GAAG,WAAW;IACxB,IAAI,CAACC,IAAI,GAAG,mBAAmB;IAE/B,IAAI,CAACC,aAAa,GAAGxD,MAAM;;IAE3B;IACA,MAAMyD,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,gBAAgB,EAAE,KAAK;MACvBC,eAAe,EAAE,KAAK;MACtBC,qBAAqB,EAAE,KAAK;MAC5BC,gBAAgB,EAAE,KAAK;MACvBC,mBAAmB,EAAE,KAAK;MAC1BC,eAAe,EAAE,IAAI;MACrBC,iBAAiB,EAAE;IACrB,CAAC;IAED,IAAI,CAAC/B,IAAI,GAAG;MAAE,GAAGuB,cAAc;MAAE,GAAGvB;IAAK,CAAC;IAE1C,IAAI,CAACgC,QAAQ,CAAC,CAAC;IAEf,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;EACxC;EA6DAD,MAAMA,CAAExD,KAAK,EAAE;IACb,MAAM;MACJ2D,YAAY;MACZ/D,KAAK;MACLgE,cAAc;MACdC,aAAa;MACbpE,KAAK;MACLE;IACF,CAAC,GAAGK,KAAK;IAET,MAAM;MACJ8D,QAAQ;MACRC,YAAY;MACZC,aAAa;MAEbC,eAAe;MACfvE,aAAa;MACbwE,YAAY;MACZC,WAAW;MACXC,kBAAkB;MAClBC;IACF,CAAC,GAAG,IAAI,CAAC/C,IAAI,CAACgD,wBAAwB,CAAC,CAAC;;IAExC;IACA;IACA;IACA,MAAMC,mBAAmB,GAAG5E,cAAc,GACtCO,MAAM,CAAC6B,MAAM,CAACnC,KAAK,CAAC,GACpBkE,QAAQ;IACZ,MAAMU,gBAAgB,GAAG,CAAC,CAACb,YAAY,CAACa,gBAAgB;IACxD,MAAMC,sBAAsB,GAAGd,YAAY,CAACe,cAAc,KAAK,KAAK;IAEpE,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,iBAAiB,GAAG,CAAC;IAEzBb,YAAY,CAACc,OAAO,CAAEC,IAAI,IAAK;MAC7BH,SAAS,IAAIG,IAAI,CAACxE,QAAQ,CAACyE,UAAU,IAAI,CAAC;MAC1CH,iBAAiB,IAAIE,IAAI,CAACxE,QAAQ,CAAC6B,aAAa,IAAI,CAAC;IACvD,CAAC,CAAC;IACF,MAAM6C,QAAQ,GAAAlD,2BAAA,CAAG,IAAI,EAAAX,iBAAA,EAAAA,iBAAA,EAAmB;MACtC8D,QAAQ,EAAEL,iBAAiB;MAC3BM,KAAK,EAAEP,SAAS;MAChBQ,SAAS,EAAER,SAAS,GAAGC;IACzB,CAAC,CAAC;IAEF,OAAOzF,WAAW,CAAC;MACjBM,KAAK;MACL2F,WAAW,EAAE5F,iBAAiB,CAC5BC,KAAK,EACLC,aAAa,EACbC,cAAc,EACdK,KAAK,CAACJ,KAAK,IAAI,CAAC,CAClB,CAAC;MACDgE,cAAc;MACdC,aAAa;MACbc,SAAS;MACTC,iBAAiB;MACjBlF,aAAa,EAAE,KAAK;MACpByE,WAAW;MACXD,YAAY;MACZD,eAAe;MACfG,kBAAkB;MAClBC,WAAW;MACX1E,cAAc;MACd0F,QAAQ,EAAErB,aAAa,CAAC3D,MAAM;MAC9ByD,QAAQ,EAAES,mBAAmB,CAAClE,MAAM;MACpCiF,UAAU,EAAEvB,YAAY,CAAC1D,MAAM;MAC/B2E,QAAQ;MACRpF,KAAK;MACL2F,IAAI,EAAE,IAAI,CAACA,IAAI;MACfjE,IAAI,EAAE,IAAI,CAACA,IAAI;MACfM,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7B0B,iBAAiB,EAAE,IAAI,CAAC/B,IAAI,CAAC+B,iBAAiB;MAC9CkB,gBAAgB;MAChBC,sBAAsB;MACtBrB,mBAAmB,EAAE,IAAI,CAAC7B,IAAI,CAAC6B,mBAAmB;MAClDJ,gBAAgB,EAAE,IAAI,CAACzB,IAAI,CAACyB,gBAAgB;MAC5CC,eAAe,EAAE,IAAI,CAAC1B,IAAI,CAAC0B,eAAe;MAC1CC,qBAAqB,EAAE,IAAI,CAAC3B,IAAI,CAAC2B,qBAAqB;MACtDC,gBAAgB,EAAE,IAAI,CAAC5B,IAAI,CAAC4B,gBAAgB;MAC5CE,eAAe,EAAE,IAAI,CAAC9B,IAAI,CAAC8B,eAAe;MAC1CmC,aAAa,EAAE,IAAI,CAACA;IACtB,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAAA,EAAI;IACT;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,EAAE;IACvB,MAAMC,SAAS,GAAG3G,gBAAgB,CAACyG,OAAO,CAAC;IAC3C,IAAI,CAACE,SAAS,EAAE;MACdF,OAAO,CAACG,GAAG,GAAG,KAAK;IACrB;EACF;EAEAnC,OAAOA,CAAA,EAAI;IACT,MAAM;MAAEX;IAAO,CAAC,GAAG,IAAI,CAACxB,IAAI;IAC5B,IAAIwB,MAAM,EAAE;MACV,IAAI,CAAC+C,KAAK,CAAC/C,MAAM,EAAE,IAAI,CAAC;IAC1B;EACF;EAEAgD,SAASA,CAAA,EAAI;IACX,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB;AACF;AAAC,SAAAtE,mBAnKoBuE,UAAU,EAAE;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAC7B,IAAIF,UAAU,CAACf,KAAK,KAAK,CAAC,IAAIe,UAAU,CAACd,SAAS,KAAK,CAAC,EAAE;IACxD,OAAO,CAAC;EACV;;EAEA;EACA,CAAAgB,sBAAA,IAAAD,qBAAA,GAAApE,2BAAA,KAAI,EAAAhB,eAAA,GAAAA,eAAA,aAAAqF,sBAAA,GAAAD,qBAAA,CAAApF,eAAA,IAAqBwB,WAAW,CAACC,GAAG,CAAC,CAAC;EAC1C,MAAM6D,EAAE,GAAG9D,WAAW,CAACC,GAAG,CAAC,CAAC,GAAAT,2BAAA,CAAG,IAAI,EAAAhB,eAAA,EAAAA,eAAA,CAAgB;EACnD,IAAIsF,EAAE,KAAK,CAAC,EAAE;IAAA,IAAAC,sBAAA;IACZ,OAAOC,IAAI,CAACC,KAAK,CAAC,EAAAF,sBAAA,GAAAvE,2BAAA,CAAC,IAAI,EAAAZ,YAAA,EAAAA,YAAA,aAAAmF,sBAAA,GAAiB,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE;EACxD;EAEA,MAAMG,0BAA0B,GAAGP,UAAU,CAAChB,QAAQ,GAAAnD,2BAAA,CAAG,IAAI,EAAAd,sBAAA,EAAAA,sBAAA,CAAuB;EACpFc,2BAAA,KAAI,EAAAd,sBAAA,EAAAA,sBAAA,IAA0BiF,UAAU,CAAChB,QAAQ;;EAEjD;EACA;EACA,IAAIuB,0BAA0B,IAAI,CAAC,EAAE;IAAA,IAAAC,sBAAA;IACnC,OAAOH,IAAI,CAACC,KAAK,CAAC,EAAAE,sBAAA,GAAA3E,2BAAA,CAAC,IAAI,EAAAZ,YAAA,EAAAA,YAAA,aAAAuF,sBAAA,GAAiB,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE;EACxD;EACA,MAAMC,YAAY,GAAGF,0BAA0B,GAAGJ,EAAE;EACpD,MAAMO,aAAa,GAAG7E,2BAAA,KAAI,EAAAb,cAAA,EAAAA,cAAA,KAAmB,IAAI,GAC7CyF,YAAY,GACZ1H,SAAS,CAAC0H,YAAY,EAAA5E,2BAAA,CAAE,IAAI,EAAAb,cAAA,EAAAA,cAAA,GAAiB3B,mBAAmB,EAAE8G,EAAE,CAAC;EACzEtE,2BAAA,KAAI,EAAAb,cAAA,EAAAA,cAAA,IAAkB0F,aAAa;EACnC,MAAMC,UAAU,GAAGX,UAAU,CAACd,SAAS,GAAGwB,aAAa;EAEvD,MAAME,kBAAkB,GAAGP,IAAI,CAACQ,GAAG,CAAChF,2BAAA,KAAI,EAAAZ,YAAA,EAAAA,YAAA,IAAgBkF,EAAE,EAAE,CAAC,CAAC;EAC9D,MAAMW,WAAW,GAAGjF,2BAAA,KAAI,EAAAZ,YAAA,EAAAA,YAAA,KAAiB,IAAI,GACzC0F,UAAU,GACV5H,SAAS,CAAC4H,UAAU,EAAEC,kBAAkB,EAAEtH,iBAAiB,EAAE6G,EAAE,CAAC;EACpEtE,2BAAA,KAAI,EAAAZ,YAAA,EAAAA,YAAA,IAAgB6F,WAAW;EAC/BjF,2BAAA,KAAI,EAAAhB,eAAA,EAAAA,eAAA,IAAmBwB,WAAW,CAACC,GAAG,CAAC,CAAC;EAExC,OAAO+D,IAAI,CAACC,KAAK,CAACQ,WAAW,GAAG,GAAG,CAAC,GAAG,EAAE;AAC3C;AA1EmB3F,SAAS,CACrB4F,OAAO,GAAG5H,WAAW,CAAC6H,OAAO"}