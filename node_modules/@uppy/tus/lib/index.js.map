{"version":3,"names":["UploaderPlugin","tus","Provider","RequestClient","Socket","emitSocketProgress","getSocketHost","EventManager","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","filterNonFailedFiles","filterFilesToEmitUploadStarted","getFingerprint","packageJson","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","_retryDelayIterator","_classPrivateFieldLooseKey","_upload","_requestSocketToken","_uploadFiles","_handleUpload","Tus","constructor","uppy","opts","_this$opts$rateLimite","_this$opts$retryDelay","Object","defineProperty","value","_uploadFiles2","_upload2","writable","file","options","Client","remote","providerOptions","provider","client","assign","res","post","url","body","protocol","size","data","meta","token","fileIDs","length","log","limit","filesToUpload","getFilesByIds","_classPrivateFieldLooseBase","type","id","title","defaultOptions","useFastRemoteRetry","withCredentials","allowedMetaFields","undefined","Error","requests","rateLimitedQueue","values","uploaders","create","uploaderEvents","uploaderSockets","handleResetProgress","bind","setQueueRequestSocketToken","wrapPromiseFunction","priority","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","remove","close","connectToServerSocket","_this","Promise","resolve","reject","serverToken","host","companionUrl","socket","target","autoOpen","queuedRequest","onFileRemove","send","onPause","isPaused","run","open","onPauseAll","onCancelAll","_temp","reason","onResumeAll","error","onRetry","isOpen","onRetryAll","on","progressData","errData","message","cause","setFileState","emit","done","uploadResp","uploadURL","onReceiveUploadUrl","currentFile","getFile","cb","targetFileID","eventHandler","_this2","arguments","install","capabilities","resumableUploads","addUploader","uninstall","removeUploader","_this3","qRequest","upload","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","userProvidedPromise","shouldBeRequeued","p","all","err","_queuedRequest","originalRequest","bytesUploaded","bytesTotal","name","defaultOnShouldRetry","_err$originalResponse","status","originalResponse","getStatus","_classPrivateFieldLoo","next","rateLimit","navigator","onLine","pause","window","addEventListener","resume","once","fn","onShouldRetry","_len","args","Array","_key","copyProp","obj","srcProp","destProp","isArray","item","Upload","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","_temp2","catch","filesFiltered","filesToEmit","allSettled","map","i","current","total","isRemote","controller","AbortController","removedHandler","removedFile","uploadPromise","uploadRemoteFile","signal","wrapSyncFunction","off","VERSION","version"],"sources":["index.js"],"sourcesContent":["import UploaderPlugin from '@uppy/core/lib/UploaderPlugin.js'\nimport * as tus from 'tus-js-client'\nimport { Provider, RequestClient, Socket } from '@uppy/companion-client'\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress'\nimport getSocketHost from '@uppy/utils/lib/getSocketHost'\nimport EventManager from '@uppy/utils/lib/EventManager'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport hasProperty from '@uppy/utils/lib/hasProperty'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\nimport getFingerprint from './getFingerprint.js'\n\nimport packageJson from '../package.json'\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus extends UploaderPlugin {\n  static VERSION = packageJson.version\n\n  #retryDelayIterator\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      useFastRemoteRetry: true,\n      limit: 20,\n      retryDelays: tusDefaultOptions.retryDelays,\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.')\n    }\n\n    if ('autoRetry' in opts) {\n      throw new Error('The `autoRetry` option was deprecated and has been removed.')\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n    this.setQueueRequestSocketToken(this.requests.wrapPromiseFunction(this.#requestSocketToken, { priority: -1 }))\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n\n      uploader.abort()\n\n      if (opts.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventManager instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventManager instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventManager instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventManager instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  #upload (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n      let qRequest\n      let upload\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        ...opts,\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        let userProvidedPromise\n        if (typeof opts.onBeforeRequest === 'function') {\n          userProvidedPromise = opts.onBeforeRequest(req, file)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          let done\n          const p = new Promise((res) => { // eslint-disable-line promise/param-names\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          // If the request has been requeued because it was rate limited by the\n          // remote server, we want to wait for `RateLimitedQueue` to dispatch\n          // the re-try request.\n          // Therefore we create a promise that the queue will resolve when\n          // enough time has elapsed to expect not to be rate-limited again.\n          // This means we can hold the Tus retry here with a `Promise.all`,\n          // together with the returned value of the user provided\n          // `onBeforeRequest` option callback (in case it returns a promise).\n          return Promise.all([p, userProvidedPromise])\n        }\n        return userProvidedPromise\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          // eslint-disable-next-line no-param-reassign\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest?.abort()\n\n        this.uppy.emit('upload-error', file, err)\n\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n\n        resolve(upload)\n      }\n\n      const defaultOnShouldRetry = (err) => {\n        const status = err?.originalResponse?.getStatus()\n\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (status > 400 && status < 500 && status !== 409 && status !== 423) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          // HTTP 409 Conflict (happens if the Upload-Offset header does not match the one on the server)\n          // HTTP 423 Locked (happens when a paused download is resumed too quickly)\n          return false\n        } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener('online', () => {\n              this.requests.resume()\n            }, { once: true })\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort () {\n            this.shouldBeRequeued = false\n          },\n          done () {\n            throw new Error('Cannot mark a queued request as done: this indicates a bug')\n          },\n          fn () {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      if (opts.onShouldRetry != null) {\n        uploadOptions.onShouldRetry = (...args) => opts.onShouldRetry(...args, defaultOnShouldRetry)\n      } else {\n        uploadOptions.onShouldRetry = defaultOnShouldRetry\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          // eslint-disable-next-line no-param-reassign\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const allowedMetaFields = Array.isArray(opts.allowedMetaFields)\n        ? opts.allowedMetaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      allowedMetaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventManager(this.uppy)\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  #requestSocketToken = async (file, options) => {\n    const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n    const client = new Client(this.uppy, file.remote.providerOptions)\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    const res = await client.post(file.remote.url, {\n      ...file.remote.body,\n      endpoint: opts.endpoint,\n      uploadUrl: opts.uploadUrl,\n      protocol: 'tus',\n      size: file.data.size,\n      headers: opts.headers,\n      metadata: file.meta,\n    }, options)\n    return res.token\n  }\n\n  /**\n   * See the comment on the upload() method.\n   *\n   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is\n   * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().\n   *\n   * @param {UppyFile} file\n   */\n  async connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventManager(this.uppy)\n\n      let queuedRequest\n\n      this.onFileRemove(file.id, () => {\n        socket.send('cancel', {})\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          socket.send('pause', {})\n          queuedRequest.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.open()\n            socket.send('resume', {})\n\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        socket.send('pause', {})\n        queuedRequest.abort()\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          socket.send('cancel', {})\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id)\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.open()\n          socket.send('resume', {})\n\n          return () => {}\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        // See the comment in the onRetry() call\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        const { message } = errData.error\n        const error = Object.assign(new Error(message), { cause: errData.error })\n\n        // If the remote retry optimisation should not be used,\n        // close the socket—this will tell companion to clear state and delete the file.\n        if (!this.opts.useFastRemoteRetry) {\n          this.resetUploaderReferences(file.id)\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null,\n          })\n        } else {\n          socket.close()\n        }\n\n        this.uppy.emit('upload-error', file, error)\n        queuedRequest.done()\n        reject(error)\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n        socket.close()\n        resolve()\n      })\n\n      queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          socket.send('pause', {})\n        } else {\n          socket.open()\n        }\n\n        // Just close the socket here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      })\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(string): void} cb\n   */\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(boolean): void} cb\n   */\n  onPause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} eventHandler\n   */\n  onCancelAll (fileID, eventHandler) {\n    this.uploaderEvents[fileID].on('cancel-all', (...args) => {\n      if (!this.uppy.getFile(fileID)) return\n      eventHandler(...args)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  async #uploadFiles (files) {\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    await Promise.allSettled(filesFiltered.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        this.resetUploaderReferences(file.id)\n        const uploadPromise = this.uploadRemoteFile(file, { signal: controller.signal })\n\n        this.requests.wrapSyncFunction(() => {\n          this.uppy.off('file-removed', removedHandler)\n        }, { priority: -1 })()\n\n        return uploadPromise\n      }\n      return this.#upload(file, current, total)\n    }))\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  #handleUpload = async (fileIDs) => {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = this.uppy.getFilesByIds(fileIDs)\n\n    await this.#uploadFiles(filesToUpload)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.#handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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"}